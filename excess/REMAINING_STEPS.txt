╔══════════════════════════════════════════════════════════════════════════╗
║                  🚀 WANDERLINK - REMAINING SETUP STEPS                   ║
╚══════════════════════════════════════════════════════════════════════════╝

✅ COMPLETED SO FAR:
  ✓ Supabase credentials added to .env
  ✓ Supabase Python package installed
  ✓ Agent service running on http://localhost:8000
  ✓ New /agent-trips-v2 page created with auto-submit
  ✓ API endpoints ready (/api/store-user-trip, /api/check-group-status, etc.)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

⏳ REMAINING STEPS (MANUAL):

┌────────────────────────────────────────────────────────────────────────┐
│ STEP 1: Run SUPABASE_SCHEMA.sql in Supabase Dashboard                 │
└────────────────────────────────────────────────────────────────────────┘

  1. Open Supabase Dashboard:
     https://supabase.com/dashboard/project/xbspnzviiefekzosukfa/sql/new

  2. Open file: SUPABASE_SCHEMA.sql (in project root)

  3. Copy ALL contents (350+ lines)

  4. Paste into Supabase SQL Editor

  5. Click "RUN" button or press Ctrl+Enter

  6. Verify success - should see:
     ✓ Tables created: groups, group_members, group_messages, user_trip_preferences
     ✓ Indexes created
     ✓ RLS policies enabled
     ✓ Realtime enabled

  7. Test with:
     SELECT * FROM groups;
     (Should return empty result, not error)

┌────────────────────────────────────────────────────────────────────────┐
│ STEP 2: Update Planner Agent on Agentverse                            │
└────────────────────────────────────────────────────────────────────────┘

  1. Open Agentverse:
     https://agentverse.ai

  2. Login and find "Planner" agent
     (Address: agent1qdp7kupk4agz8n...)

  3. Click to open agent → Edit "agent.py"

  4. Copy file: agents/src/agents/planner_agent.py
     (Select ALL - it's already updated to use API proxy)

  5. Paste into Agentverse editor (replace all existing code)

  6. Go to "Secrets" tab

  7. Add new secret:
     Key: AGENT_SERVICE_URL
     Value: (See STEP 3 for how to get this)

  8. Click "Save & Deploy"

  9. Check Logs tab for:
     ✅ "✨ Ready to create travel groups!"

┌────────────────────────────────────────────────────────────────────────┐
│ STEP 3: Setup Ngrok (Required for Agentverse to reach local service)  │
└────────────────────────────────────────────────────────────────────────┘

  WHY NEEDED: Agentverse (cloud) needs to call your local agent service 
  to store groups in Supabase. Ngrok creates public tunnel to localhost.

  1. Install ngrok:
     https://ngrok.com/download

  2. Open new terminal and run:
     ngrok http 8000

  3. Copy the "Forwarding" URL:
     Example: https://abc123-456-789.ngrok-free.app

  4. Add to Agentverse Planner secrets:
     Key: AGENT_SERVICE_URL
     Value: https://abc123-456-789.ngrok-free.app (your ngrok URL)

  5. Keep ngrok running during testing!

  ⚠️  ALTERNATIVE: If deploying agent service to cloud (Render, Railway, 
      Fly.io), use that public URL instead of ngrok.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🧪 TESTING THE COMPLETE FLOW:

┌────────────────────────────────────────────────────────────────────────┐
│ Test Scenario: Complete Group Formation (3 Users)                     │
└────────────────────────────────────────────────────────────────────────┘

  1. Ensure running:
     ✓ Agent service (http://localhost:8000)
     ✓ Frontend (http://localhost:3000)
     ✓ Ngrok (if testing with Agentverse)

  2. Open 3 BROWSER TABS to:
     http://localhost:3000/agent-trips-v2

  3. In Tab 1, submit:
     "Varkala adventure trip, 5 days, budget friendly"
     
     Expected:
     ✅ Status → "AGENTS ARE WORKING..."
     ⏳ See "Travel Agent extracted preferences" ✓
     ⏳ See "MatchMaker is pooling travelers..." (pulsing)
     🔄 "Checking for group formation every 3 seconds..."

  4. In Tab 2, submit:
     "Goa beach vacation, 7 days with yoga"

     Expected:
     ✅ Same status as Tab 1
     ⏳ Both tabs polling...

  5. In Tab 3, submit:
     "Cultural tour of Jaipur, 4 days"

     Expected (ALL 3 TABS):
     🎉 "GROUP MATCHED! 🎉" banner appears
     ✅ "OPEN GROUP CHAT" button shows

  6. Click "OPEN GROUP CHAT" in any tab:

     Expected:
     ✅ Group name: "{Destination} Adventure Group - Oct 2025"
     ✅ Destination and member count
     ✅ Welcome message from system
     ✅ Itinerary from Planner agent
     ✅ All 3 members listed (with "YOU" badge on your user)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔍 DEBUGGING CHECKLIST:

If group doesn't form:

  □ Check agent service terminal:
    - Should see "✅ Supabase client initialized"
    - Should receive POST /api/store-user-trip (3 times)

  □ Check Supabase Dashboard:
    - Query: SELECT * FROM user_trip_preferences;
    - Should see 3 rows with status='pending'

  □ Check Agentverse Planner logs:
    - Should see "📨 Received group data from MatchMaker"
    - Should see "💾 Group stored in Supabase via API"
    - Look for any error messages

  □ Check ngrok terminal:
    - Should see POST /api/store-group requests
    - Status should be 200 OK

  □ Check browser console (F12):
    - Should see "✅ Trip stored in database"
    - Should see "✅ Sent to Travel Agent on Agentverse"
    - Should see polling requests every 3 seconds

If chat doesn't show:

  □ Check Supabase tables:
    - SELECT * FROM groups; (should have 1 row)
    - SELECT * FROM group_members; (should have 3 rows)
    - SELECT * FROM group_messages; (should have 2+ rows)

  □ Check agent service logs:
    - Should see successful /api/store-group call
    - Should see "💾 Group created in Supabase"

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📚 DOCUMENTATION FILES:

  • AUTOMATED_FLOW_SETUP.md     - Complete architecture & flow diagram
  • SUPABASE_SCHEMA.sql          - Database schema to run
  • COMPLETE_SETUP.ps1           - Automated setup script
  • THIS_FILE.txt                - Quick reference (you are here!)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎯 QUICK START COMMAND:

  Run this PowerShell script to check everything:
  
  .\COMPLETE_SETUP.ps1

  It will:
  ✓ Verify agent service running
  ✓ Verify frontend running  
  ✓ Open browser to /agent-trips-v2
  ✓ Show testing instructions

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✨ AFTER COMPLETING ALL STEPS:

Your users will experience:

  1. Submit trip on frontend → Automatic (no Agentverse chat needed!)
  2. Agents process automatically → Fully automated agent communication
  3. Group forms in database → Persistent storage
  4. Frontend detects via polling → Auto-updates every 3 seconds
  5. Group chat appears → Built-in chat UI with itinerary
  6. Users collaborate → All in one place, no context switching!

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Need help? Check:
  • AUTOMATED_FLOW_SETUP.md for detailed architecture
  • Agent service logs at http://localhost:8000
  • Agentverse agent logs at https://agentverse.ai
  • Supabase dashboard at https://supabase.com/dashboard

Good luck! 🚀

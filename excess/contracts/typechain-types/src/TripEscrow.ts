/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TripEscrow {
  export type ParticipantStruct = {
    wallet: AddressLike;
    stakedAmount: BigNumberish;
    hasJoined: boolean;
    hasConfirmed: boolean;
    isSlashed: boolean;
    checkInProofHash: BytesLike;
    confirmationTime: BigNumberish;
  };

  export type ParticipantStructOutput = [
    wallet: string,
    stakedAmount: bigint,
    hasJoined: boolean,
    hasConfirmed: boolean,
    isSlashed: boolean,
    checkInProofHash: string,
    confirmationTime: bigint
  ] & {
    wallet: string;
    stakedAmount: bigint;
    hasJoined: boolean;
    hasConfirmed: boolean;
    isSlashed: boolean;
    checkInProofHash: string;
    confirmationTime: bigint;
  };

  export type TripStruct = {
    tripId: BigNumberish;
    organizer: AddressLike;
    stakeAmount: BigNumberish;
    maxParticipants: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    status: BigNumberish;
    totalStaked: BigNumberish;
    participantCount: BigNumberish;
    emergencyFreeze: boolean;
  };

  export type TripStructOutput = [
    tripId: bigint,
    organizer: string,
    stakeAmount: bigint,
    maxParticipants: bigint,
    startTime: bigint,
    endTime: bigint,
    status: bigint,
    totalStaked: bigint,
    participantCount: bigint,
    emergencyFreeze: boolean
  ] & {
    tripId: bigint;
    organizer: string;
    stakeAmount: bigint;
    maxParticipants: bigint;
    startTime: bigint;
    endTime: bigint;
    status: bigint;
    totalStaked: bigint;
    participantCount: bigint;
    emergencyFreeze: boolean;
  };
}

export interface TripEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "CANCELLATION_WINDOW"
      | "DEFAULT_ADMIN_ROLE"
      | "ORGANIZER_ROLE"
      | "PLATFORM_FEE"
      | "SLASH_PERCENTAGE"
      | "cancelTrip"
      | "completeTrip"
      | "confirmAttendance"
      | "createTrip"
      | "getParticipant"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getRoleMembers"
      | "getTrip"
      | "getTripParticipants"
      | "grantRole"
      | "hasRole"
      | "joinTrip"
      | "participants"
      | "pause"
      | "paused"
      | "renounceRole"
      | "reportIncident"
      | "revokeRole"
      | "slashUser"
      | "supportsInterface"
      | "tripCounter"
      | "tripParticipants"
      | "trips"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CheckInSubmitted"
      | "EmergencyFreeze"
      | "ParticipantJoined"
      | "ParticipantSlashed"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TripCancelled"
      | "TripCompleted"
      | "TripCreated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CANCELLATION_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORGANIZER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SLASH_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTrip",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTrip",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmAttendance",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createTrip",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipant",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMembers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrip",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTripParticipants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinTrip",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reportIncident",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slashUser",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tripCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tripParticipants",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "trips", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CANCELLATION_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORGANIZER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SLASH_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelTrip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeTrip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmAttendance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTrip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTrip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTripParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinTrip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportIncident",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slashUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tripCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tripParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trips", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace CheckInSubmittedEvent {
  export type InputTuple = [
    tripId: BigNumberish,
    participant: AddressLike,
    proofHash: BytesLike
  ];
  export type OutputTuple = [
    tripId: bigint,
    participant: string,
    proofHash: string
  ];
  export interface OutputObject {
    tripId: bigint;
    participant: string;
    proofHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyFreezeEvent {
  export type InputTuple = [tripId: BigNumberish, initiator: AddressLike];
  export type OutputTuple = [tripId: bigint, initiator: string];
  export interface OutputObject {
    tripId: bigint;
    initiator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParticipantJoinedEvent {
  export type InputTuple = [
    tripId: BigNumberish,
    participant: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    tripId: bigint,
    participant: string,
    amount: bigint
  ];
  export interface OutputObject {
    tripId: bigint;
    participant: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParticipantSlashedEvent {
  export type InputTuple = [
    tripId: BigNumberish,
    participant: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    tripId: bigint,
    participant: string,
    amount: bigint
  ];
  export interface OutputObject {
    tripId: bigint;
    participant: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TripCancelledEvent {
  export type InputTuple = [tripId: BigNumberish, reason: string];
  export type OutputTuple = [tripId: bigint, reason: string];
  export interface OutputObject {
    tripId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TripCompletedEvent {
  export type InputTuple = [tripId: BigNumberish, totalReleased: BigNumberish];
  export type OutputTuple = [tripId: bigint, totalReleased: bigint];
  export interface OutputObject {
    tripId: bigint;
    totalReleased: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TripCreatedEvent {
  export type InputTuple = [
    tripId: BigNumberish,
    organizer: AddressLike,
    stakeAmount: BigNumberish
  ];
  export type OutputTuple = [
    tripId: bigint,
    organizer: string,
    stakeAmount: bigint
  ];
  export interface OutputObject {
    tripId: bigint;
    organizer: string;
    stakeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TripEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): TripEscrow;
  waitForDeployment(): Promise<this>;

  interface: TripEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  CANCELLATION_WINDOW: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ORGANIZER_ROLE: TypedContractMethod<[], [string], "view">;

  PLATFORM_FEE: TypedContractMethod<[], [bigint], "view">;

  SLASH_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  cancelTrip: TypedContractMethod<
    [_tripId: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;

  completeTrip: TypedContractMethod<
    [_tripId: BigNumberish],
    [void],
    "nonpayable"
  >;

  confirmAttendance: TypedContractMethod<
    [_tripId: BigNumberish, _proofHash: BytesLike],
    [void],
    "nonpayable"
  >;

  createTrip: TypedContractMethod<
    [
      _stakeAmount: BigNumberish,
      _maxParticipants: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getParticipant: TypedContractMethod<
    [_tripId: BigNumberish, _participant: AddressLike],
    [TripEscrow.ParticipantStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMember: TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  getRoleMembers: TypedContractMethod<[role: BytesLike], [string[]], "view">;

  getTrip: TypedContractMethod<
    [_tripId: BigNumberish],
    [TripEscrow.TripStructOutput],
    "view"
  >;

  getTripParticipants: TypedContractMethod<
    [_tripId: BigNumberish],
    [string[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  joinTrip: TypedContractMethod<[_tripId: BigNumberish], [void], "payable">;

  participants: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, bigint, boolean, boolean, boolean, string, bigint] & {
        wallet: string;
        stakedAmount: bigint;
        hasJoined: boolean;
        hasConfirmed: boolean;
        isSlashed: boolean;
        checkInProofHash: string;
        confirmationTime: bigint;
      }
    ],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  reportIncident: TypedContractMethod<
    [_tripId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  slashUser: TypedContractMethod<
    [_tripId: BigNumberish, _participant: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tripCounter: TypedContractMethod<[], [bigint], "view">;

  tripParticipants: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  trips: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        tripId: bigint;
        organizer: string;
        stakeAmount: bigint;
        maxParticipants: bigint;
        startTime: bigint;
        endTime: bigint;
        status: bigint;
        totalStaked: bigint;
        participantCount: bigint;
        emergencyFreeze: boolean;
      }
    ],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CANCELLATION_WINDOW"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ORGANIZER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PLATFORM_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SLASH_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelTrip"
  ): TypedContractMethod<
    [_tripId: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "completeTrip"
  ): TypedContractMethod<[_tripId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmAttendance"
  ): TypedContractMethod<
    [_tripId: BigNumberish, _proofHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTrip"
  ): TypedContractMethod<
    [
      _stakeAmount: BigNumberish,
      _maxParticipants: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getParticipant"
  ): TypedContractMethod<
    [_tripId: BigNumberish, _participant: AddressLike],
    [TripEscrow.ParticipantStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleMember"
  ): TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleMemberCount"
  ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleMembers"
  ): TypedContractMethod<[role: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTrip"
  ): TypedContractMethod<
    [_tripId: BigNumberish],
    [TripEscrow.TripStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTripParticipants"
  ): TypedContractMethod<[_tripId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinTrip"
  ): TypedContractMethod<[_tripId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "participants"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, bigint, boolean, boolean, boolean, string, bigint] & {
        wallet: string;
        stakedAmount: bigint;
        hasJoined: boolean;
        hasConfirmed: boolean;
        isSlashed: boolean;
        checkInProofHash: string;
        confirmationTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reportIncident"
  ): TypedContractMethod<[_tripId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "slashUser"
  ): TypedContractMethod<
    [_tripId: BigNumberish, _participant: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tripCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tripParticipants"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "trips"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        tripId: bigint;
        organizer: string;
        stakeAmount: bigint;
        maxParticipants: bigint;
        startTime: bigint;
        endTime: bigint;
        status: bigint;
        totalStaked: bigint;
        participantCount: bigint;
        emergencyFreeze: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CheckInSubmitted"
  ): TypedContractEvent<
    CheckInSubmittedEvent.InputTuple,
    CheckInSubmittedEvent.OutputTuple,
    CheckInSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyFreeze"
  ): TypedContractEvent<
    EmergencyFreezeEvent.InputTuple,
    EmergencyFreezeEvent.OutputTuple,
    EmergencyFreezeEvent.OutputObject
  >;
  getEvent(
    key: "ParticipantJoined"
  ): TypedContractEvent<
    ParticipantJoinedEvent.InputTuple,
    ParticipantJoinedEvent.OutputTuple,
    ParticipantJoinedEvent.OutputObject
  >;
  getEvent(
    key: "ParticipantSlashed"
  ): TypedContractEvent<
    ParticipantSlashedEvent.InputTuple,
    ParticipantSlashedEvent.OutputTuple,
    ParticipantSlashedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TripCancelled"
  ): TypedContractEvent<
    TripCancelledEvent.InputTuple,
    TripCancelledEvent.OutputTuple,
    TripCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TripCompleted"
  ): TypedContractEvent<
    TripCompletedEvent.InputTuple,
    TripCompletedEvent.OutputTuple,
    TripCompletedEvent.OutputObject
  >;
  getEvent(
    key: "TripCreated"
  ): TypedContractEvent<
    TripCreatedEvent.InputTuple,
    TripCreatedEvent.OutputTuple,
    TripCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "CheckInSubmitted(uint256,address,bytes32)": TypedContractEvent<
      CheckInSubmittedEvent.InputTuple,
      CheckInSubmittedEvent.OutputTuple,
      CheckInSubmittedEvent.OutputObject
    >;
    CheckInSubmitted: TypedContractEvent<
      CheckInSubmittedEvent.InputTuple,
      CheckInSubmittedEvent.OutputTuple,
      CheckInSubmittedEvent.OutputObject
    >;

    "EmergencyFreeze(uint256,address)": TypedContractEvent<
      EmergencyFreezeEvent.InputTuple,
      EmergencyFreezeEvent.OutputTuple,
      EmergencyFreezeEvent.OutputObject
    >;
    EmergencyFreeze: TypedContractEvent<
      EmergencyFreezeEvent.InputTuple,
      EmergencyFreezeEvent.OutputTuple,
      EmergencyFreezeEvent.OutputObject
    >;

    "ParticipantJoined(uint256,address,uint256)": TypedContractEvent<
      ParticipantJoinedEvent.InputTuple,
      ParticipantJoinedEvent.OutputTuple,
      ParticipantJoinedEvent.OutputObject
    >;
    ParticipantJoined: TypedContractEvent<
      ParticipantJoinedEvent.InputTuple,
      ParticipantJoinedEvent.OutputTuple,
      ParticipantJoinedEvent.OutputObject
    >;

    "ParticipantSlashed(uint256,address,uint256)": TypedContractEvent<
      ParticipantSlashedEvent.InputTuple,
      ParticipantSlashedEvent.OutputTuple,
      ParticipantSlashedEvent.OutputObject
    >;
    ParticipantSlashed: TypedContractEvent<
      ParticipantSlashedEvent.InputTuple,
      ParticipantSlashedEvent.OutputTuple,
      ParticipantSlashedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TripCancelled(uint256,string)": TypedContractEvent<
      TripCancelledEvent.InputTuple,
      TripCancelledEvent.OutputTuple,
      TripCancelledEvent.OutputObject
    >;
    TripCancelled: TypedContractEvent<
      TripCancelledEvent.InputTuple,
      TripCancelledEvent.OutputTuple,
      TripCancelledEvent.OutputObject
    >;

    "TripCompleted(uint256,uint256)": TypedContractEvent<
      TripCompletedEvent.InputTuple,
      TripCompletedEvent.OutputTuple,
      TripCompletedEvent.OutputObject
    >;
    TripCompleted: TypedContractEvent<
      TripCompletedEvent.InputTuple,
      TripCompletedEvent.OutputTuple,
      TripCompletedEvent.OutputObject
    >;

    "TripCreated(uint256,address,uint256)": TypedContractEvent<
      TripCreatedEvent.InputTuple,
      TripCreatedEvent.OutputTuple,
      TripCreatedEvent.OutputObject
    >;
    TripCreated: TypedContractEvent<
      TripCreatedEvent.InputTuple,
      TripCreatedEvent.OutputTuple,
      TripCreatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}

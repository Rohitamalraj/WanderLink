/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ZKProofVerifier {
  export type ProofMetadataStruct = {
    proofHash: BytesLike;
    lighthouseCID: string;
    timestamp: BigNumberish;
    isVerified: boolean;
    expiresAt: BigNumberish;
  };

  export type ProofMetadataStructOutput = [
    proofHash: string,
    lighthouseCID: string,
    timestamp: bigint,
    isVerified: boolean,
    expiresAt: bigint
  ] & {
    proofHash: string;
    lighthouseCID: string;
    timestamp: bigint;
    isVerified: boolean;
    expiresAt: bigint;
  };
}

export interface ZKProofVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getProof"
      | "getProofCID"
      | "hasValidProof"
      | "isProofExpired"
      | "revokeProof"
      | "submitProof"
      | "updateProof"
      | "usedProofHashes"
      | "userProofs"
      | "verifyProofHash"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProofRevoked" | "ProofSubmitted" | "ProofVerified"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getProof",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProofCID",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasValidProof",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isProofExpired",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeProof",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitProof",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProof",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usedProofHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userProofs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProofHash",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "getProof", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProofCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasValidProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProofExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedProofHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userProofs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyProofHash",
    data: BytesLike
  ): Result;
}

export namespace ProofRevokedEvent {
  export type InputTuple = [
    user: AddressLike,
    proofHash: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    proofHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    proofHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProofSubmittedEvent {
  export type InputTuple = [
    user: AddressLike,
    proofHash: BytesLike,
    lighthouseCID: string,
    timestamp: BigNumberish,
    expiresAt: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    proofHash: string,
    lighthouseCID: string,
    timestamp: bigint,
    expiresAt: bigint
  ];
  export interface OutputObject {
    user: string;
    proofHash: string;
    lighthouseCID: string;
    timestamp: bigint;
    expiresAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProofVerifiedEvent {
  export type InputTuple = [
    user: AddressLike,
    proofHash: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    proofHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    proofHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZKProofVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): ZKProofVerifier;
  waitForDeployment(): Promise<this>;

  interface: ZKProofVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getProof: TypedContractMethod<
    [_user: AddressLike],
    [ZKProofVerifier.ProofMetadataStructOutput],
    "view"
  >;

  getProofCID: TypedContractMethod<[_user: AddressLike], [string], "view">;

  hasValidProof: TypedContractMethod<[_user: AddressLike], [boolean], "view">;

  isProofExpired: TypedContractMethod<[_user: AddressLike], [boolean], "view">;

  revokeProof: TypedContractMethod<[], [void], "nonpayable">;

  submitProof: TypedContractMethod<
    [_proofHash: BytesLike, _lighthouseCID: string, _expiresAt: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateProof: TypedContractMethod<
    [_proofHash: BytesLike, _lighthouseCID: string, _expiresAt: BigNumberish],
    [void],
    "nonpayable"
  >;

  usedProofHashes: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  userProofs: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, boolean, bigint] & {
        proofHash: string;
        lighthouseCID: string;
        timestamp: bigint;
        isVerified: boolean;
        expiresAt: bigint;
      }
    ],
    "view"
  >;

  verifyProofHash: TypedContractMethod<
    [_user: AddressLike, _proofHash: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getProof"
  ): TypedContractMethod<
    [_user: AddressLike],
    [ZKProofVerifier.ProofMetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProofCID"
  ): TypedContractMethod<[_user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "hasValidProof"
  ): TypedContractMethod<[_user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isProofExpired"
  ): TypedContractMethod<[_user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "revokeProof"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitProof"
  ): TypedContractMethod<
    [_proofHash: BytesLike, _lighthouseCID: string, _expiresAt: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProof"
  ): TypedContractMethod<
    [_proofHash: BytesLike, _lighthouseCID: string, _expiresAt: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usedProofHashes"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "userProofs"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, boolean, bigint] & {
        proofHash: string;
        lighthouseCID: string;
        timestamp: bigint;
        isVerified: boolean;
        expiresAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyProofHash"
  ): TypedContractMethod<
    [_user: AddressLike, _proofHash: BytesLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "ProofRevoked"
  ): TypedContractEvent<
    ProofRevokedEvent.InputTuple,
    ProofRevokedEvent.OutputTuple,
    ProofRevokedEvent.OutputObject
  >;
  getEvent(
    key: "ProofSubmitted"
  ): TypedContractEvent<
    ProofSubmittedEvent.InputTuple,
    ProofSubmittedEvent.OutputTuple,
    ProofSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ProofVerified"
  ): TypedContractEvent<
    ProofVerifiedEvent.InputTuple,
    ProofVerifiedEvent.OutputTuple,
    ProofVerifiedEvent.OutputObject
  >;

  filters: {
    "ProofRevoked(address,bytes32,uint256)": TypedContractEvent<
      ProofRevokedEvent.InputTuple,
      ProofRevokedEvent.OutputTuple,
      ProofRevokedEvent.OutputObject
    >;
    ProofRevoked: TypedContractEvent<
      ProofRevokedEvent.InputTuple,
      ProofRevokedEvent.OutputTuple,
      ProofRevokedEvent.OutputObject
    >;

    "ProofSubmitted(address,bytes32,string,uint256,uint256)": TypedContractEvent<
      ProofSubmittedEvent.InputTuple,
      ProofSubmittedEvent.OutputTuple,
      ProofSubmittedEvent.OutputObject
    >;
    ProofSubmitted: TypedContractEvent<
      ProofSubmittedEvent.InputTuple,
      ProofSubmittedEvent.OutputTuple,
      ProofSubmittedEvent.OutputObject
    >;

    "ProofVerified(address,bytes32,uint256)": TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;
    ProofVerified: TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;
  };
}
